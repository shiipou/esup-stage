# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Build
on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
      - name: Zip generated dir
        run: |
          cp Dockerfile target/esupstage-*/Dockerfile
          zip -r esupstage.zip target/esupstage-*
      - name: Save artifact
        uses: actions/upload-artifact@v2
        with:
          name: esupstage
          path: esupstage.zip
          retention-days: 7

  docker:
    name: Build Docker
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - name: Download builded web artifact
        uses: actions/download-artifact@v2
        with:
          name: esupstage
      - name: Unzip pre-build package
        run: |
          unzip esupstage.zip
          rm esupstage.zip
          mv target/esupstage-*/Dockerfile ./Dockerfile
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Docker login to GitHub
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Available platforms
        env:
          requested_platforms: "linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v7,linux/arm/v6"
        run: |
          if [ -z "${requested_platforms}" ]; then
            # Transform env var into bash array to calculate arrays intersect. That allow us to know the plateform that can work with our image who can be build on current github docker buildx.
            IFS=',' read -r -a requested_platforms <<< "${requested_platforms}"
            IFS=',' read -r -a available_platforms <<< "${{ steps.buildx.outputs.platforms }}"
            # Only got the intersect of two arrays
            available_platforms=$(comm -12 <(printf '%s\n' "${requested_platforms[@]}" | LC_ALL=C sort) <(printf '%s\n' "${available_platforms[@]}" | LC_ALL=C sort))
            # Just format the output for the docker commands
            requested_platforms="${requested_platforms//'
          '/,}"
            available_platforms="${available_platforms//'
          '/,}"
          else
            available_platforms=${requested_platforms}
          fi

          echo "requested_platforms=$requested_platforms"
          echo "available_platforms=$available_platforms"

          # Save Available platforms
          echo "available_platforms=${available_platforms}" >> $GITHUB_ENV
      # Use cache image for quicker build time.
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Use official buildx GitHub Action
      - name: Docker build & push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          platforms:  ${{ env.available_platforms }}
          tags: ghcr.io/${{ github.repository }}:latest

      # Save new cache
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
